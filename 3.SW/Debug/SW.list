
SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000103a8  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000006de  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000020d  00000000  00000000  00010ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000078  00000000  00000000  00010cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000411  00000000  00000000  00010d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000032a  00000000  00000000  000111a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000114cb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000000d0  00000000  00000000  00011548  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00011618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000388 	.word	0x08000388

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000388 	.word	0x08000388

080001c8 <configurepins>:


#include "stm32f3xx.h"

void configurepins(void)
	{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
		RCC->AHBENR |= (RCC_AHBENR_GPIODEN);		//IOPORT C AH BUS ENABLE FOR LED OUT
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <configurepins+0x50>)
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <configurepins+0x50>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001d6:	6153      	str	r3, [r2, #20]
		RCC->AHBENR |= (RCC_AHBENR_GPIOAEN);		//IOPORT A AH BUS ENABLE FOR SW PIN
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <configurepins+0x50>)
 80001da:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <configurepins+0x50>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e2:	6153      	str	r3, [r2, #20]
		GPIOD->MODER |= (GPIO_MODER_MODER6_0);		//MODER OF OUT LSB 1
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <configurepins+0x54>)
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <configurepins+0x54>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001ee:	6013      	str	r3, [r2, #0]
		GPIOD->MODER &= ~(GPIO_MODER_MODER6_1);		//MODER OF OUT MSB 0
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <configurepins+0x54>)
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <configurepins+0x54>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001fa:	6013      	str	r3, [r2, #0]
		GPIOA->MODER &= ~(GPIO_MODER_MODER0);		//MODER OF IN MSB+LSB 00
 80001fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000200:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f023 0303 	bic.w	r3, r3, #3
 800020a:	6013      	str	r3, [r2, #0]
	}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000
 800021c:	48000c00 	.word	0x48000c00

08000220 <main>:

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	configurepins();
 8000224:	f7ff ffd0 	bl	80001c8 <configurepins>

  while (1)
  {
	  if (GPIOA->IDR & GPIO_IDR_0)		//&ing BIT WISE IDRegistor with 0X00000001, if button pressed TRUE
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d006      	beq.n	8000244 <main+0x24>
	  {
		  GPIOD->ODR |= (GPIO_ODR_6);	//OUT PUT LED PIN HIGH
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <main+0x34>)
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <main+0x34>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000240:	6153      	str	r3, [r2, #20]
 8000242:	e7f1      	b.n	8000228 <main+0x8>
	  }
	  else
	  {
		  GPIOD->ODR &= ~(GPIO_ODR_6);	//OUT PUT LED PIN LOW
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <main+0x34>)
 8000246:	4b03      	ldr	r3, [pc, #12]	; (8000254 <main+0x34>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800024e:	6153      	str	r3, [r2, #20]
	  if (GPIOA->IDR & GPIO_IDR_0)		//&ing BIT WISE IDRegistor with 0X00000001, if button pressed TRUE
 8000250:	e7ea      	b.n	8000228 <main+0x8>
 8000252:	bf00      	nop
 8000254:	48000c00 	.word	0x48000c00

08000258 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000290 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800025c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800025e:	e003      	b.n	8000268 <LoopCopyDataInit>

08000260 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000262:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000264:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000266:	3104      	adds	r1, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000268:	480b      	ldr	r0, [pc, #44]	; (8000298 <LoopForever+0xa>)
	ldr	r3, =_edata
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <LoopForever+0xe>)
	adds	r2, r0, r1
 800026c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800026e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000270:	d3f6      	bcc.n	8000260 <CopyDataInit>
	ldr	r2, =_sbss
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000274:	e002      	b.n	800027c <LoopFillZerobss>

08000276 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000276:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000278:	f842 3b04 	str.w	r3, [r2], #4

0800027c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <LoopForever+0x16>)
	cmp	r2, r3
 800027e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000280:	d3f9      	bcc.n	8000276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000282:	f000 f813 	bl	80002ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000286:	f000 f85b 	bl	8000340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800028a:	f7ff ffc9 	bl	8000220 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000290:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000294:	080003a8 	.word	0x080003a8
	ldr	r0, =_sdata
 8000298:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800029c:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002b0:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemInit+0x84>)
 80002b2:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <SystemInit+0x84>)
 80002b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002c0:	4a1c      	ldr	r2, [pc, #112]	; (8000334 <SystemInit+0x88>)
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <SystemInit+0x88>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80002cc:	4919      	ldr	r1, [pc, #100]	; (8000334 <SystemInit+0x88>)
 80002ce:	4b19      	ldr	r3, [pc, #100]	; (8000334 <SystemInit+0x88>)
 80002d0:	685a      	ldr	r2, [r3, #4]
 80002d2:	4b19      	ldr	r3, [pc, #100]	; (8000338 <SystemInit+0x8c>)
 80002d4:	4013      	ands	r3, r2
 80002d6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002d8:	4a16      	ldr	r2, [pc, #88]	; (8000334 <SystemInit+0x88>)
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <SystemInit+0x88>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002e8:	4a12      	ldr	r2, [pc, #72]	; (8000334 <SystemInit+0x88>)
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <SystemInit+0x88>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemInit+0x88>)
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <SystemInit+0x88>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80002fe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <SystemInit+0x88>)
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <SystemInit+0x88>)
 8000304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000306:	f023 030f 	bic.w	r3, r3, #15
 800030a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800030c:	4909      	ldr	r1, [pc, #36]	; (8000334 <SystemInit+0x88>)
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <SystemInit+0x88>)
 8000310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <SystemInit+0x90>)
 8000314:	4013      	ands	r3, r2
 8000316:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <SystemInit+0x88>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <SystemInit+0x84>)
 8000320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000324:	609a      	str	r2, [r3, #8]
#endif
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	40021000 	.word	0x40021000
 8000338:	f87fc00c 	.word	0xf87fc00c
 800033c:	ff00fccc 	.word	0xff00fccc

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	4e0d      	ldr	r6, [pc, #52]	; (8000378 <__libc_init_array+0x38>)
 8000344:	4c0d      	ldr	r4, [pc, #52]	; (800037c <__libc_init_array+0x3c>)
 8000346:	1ba4      	subs	r4, r4, r6
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	2500      	movs	r5, #0
 800034c:	42a5      	cmp	r5, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	4e0b      	ldr	r6, [pc, #44]	; (8000380 <__libc_init_array+0x40>)
 8000352:	4c0c      	ldr	r4, [pc, #48]	; (8000384 <__libc_init_array+0x44>)
 8000354:	f000 f818 	bl	8000388 <_init>
 8000358:	1ba4      	subs	r4, r4, r6
 800035a:	10a4      	asrs	r4, r4, #2
 800035c:	2500      	movs	r5, #0
 800035e:	42a5      	cmp	r5, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000368:	4798      	blx	r3
 800036a:	3501      	adds	r5, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000372:	4798      	blx	r3
 8000374:	3501      	adds	r5, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
